variables:
  VERSION: 1.0.${CI_PIPELINE_ID}

stages:
#  - module-pipelines
  - deploy

#frontend:
#  stage: module-pipelines
#  trigger:
#    include:
#      - "/frontend/.gitlab-ci.yml"
#    strategy: depend #depend нужен, если какой-нибудь дочерний пайплайн свалился, мы знали, что общий пайплайн тоже идёт с ошибкой
#  only:
##    changes: #как только происходит изменение в папке frontend, запускается дочерний пайплайн, который лежит в этой папке
##      - frontend/**/*

#backend:
#  stage: module-pipelines
#  trigger:
#    include:
#      - "/backend/.gitlab-ci.yml"
#    strategy: depend 
#  only:
##    changes:  #как только происходит изменение в папке backend, запускается дочерний пайплайн, который лежит в этой папке!!
##      - backend/**/* 
       
#backend-report:
#  stage: module-pipelines
#  trigger:
#    include:
#      - "/backend-report/.gitlab-ci.yml"
#    strategy: depend
#  only:
##    changes:  #как только происходит изменение в папке backend, запускается дочерний пайплайн, который лежит в этой папке!!
##      - backend-report/**/* 

sausage-store-deploy:
  image: alpine:3.15.0
  stage: deploy
  when: manual
  before_script:
    - apk add --no-cache curl
    - curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl
    - cp kubectl /usr/local/bin/
    - chmod +x /usr/local/bin/kubectl
    - echo "$KUBECONFIG" >> kubeconfig
  script:
    - kubectl  apply -f kubernetes/backend/ --kubeconfig=kubeconfig


#sausage-store-deploy:
#  image: alpine:3.15.0
#  stage: deploy
#  when: manual
#  before_script:
#    - apk add openssh-client bash
#    - eval $(ssh-agent -s)
#    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
#    - mkdir -p ~/.ssh
#    - chmod 700 ~/.ssh
#    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
#    - chmod 644 ~/.ssh/known_hosts
#  script:
#    - echo ${CI_REGISTRY_IMAGE}
#    - echo ${CI_REGISTRY_USER}
#    - echo ${CI_REGISTRY_PASSWORD}
#    - echo ${CI_REGISTRY}
#    - touch .env
#    - echo PSQL_HOST=${PSQL_HOST} >> .env
#    - echo SPRING_DATASOURCE_USERNAME=${SPRING_DATASOURCE_USERNAME} >> .env
#    - echo PSQL_PORT=${PSQL_PORT} >> .env
#    - echo PSQL_DBNAME=${PSQL_DBNAME} >> .env
#    - echo VAULT_DEV_ROOT_TOKEN_ID=${VAULT_DEV_ROOT_TOKEN_ID} >> .env
#    - scp .env ${DEV_USER}@${DEV_HOST}:/home/${DEV_USER}/.env
#    - scp docker-compose.yaml ${DEV_USER}@${DEV_HOST}:/home/${DEV_USER}/docker-compose.yaml
#    - ssh ${DEV_USER}@${DEV_HOST}
#      "export "VAULT_DEV_ROOT_TOKEN_ID=${VAULT_DEV_ROOT_TOKEN_ID}";
#       export "CI_REGISTRY_IMAGE=${CI_REGISTRY_IMAGE}";
#       export "CI_REGISTRY_PASSWORD=${CI_REGISTRY_PASSWORD}";
#       export "CI_REGISTRY_USER=${CI_REGISTRY_USER}";
#       export "CI_REGISTRY=${CI_REGISTRY}";
#       export "VERSION=${VERSION}";
#       export "SPRING_DATASOURCE_USERNAME=${SPRING_DATASOURCE_USERNAME}";
#       export "SPRING_DATASOURCE_PASSWORD=${SPRING_DATASOURCE_PASSWORD}";
#       export "SPRING_DATA_MONGODB_URI=${SPRING_DATA_MONGODB_URI}";
#       /bin/bash -s " < ./app_deploy.sh

    



