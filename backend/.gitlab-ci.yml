include:
  - project: 'templates/ci'
    file: 'DockerInDockerTemplate.yml'

variables:
  VERSION: 1.0.${CI_PIPELINE_ID}
  MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository
  # JAVA_OPTS: -XX:MaxRAMPercentage=90

stages:
- build
- test
- release
- docker

build-backend:
  stage: build
  script:
    - echo "ARTIFACT_JOB_ID=${CI_JOB_ID}" > CI_JOB_ID.TXT
    - cd backend
    - mvn package -Dversion.application=${VERSION} -Dmaven.repo.local=${MAVEN_REPO_PATH}
  artifacts:
    paths:
    - /builds/antinitrino/sausage-store/backend/target/sausage-store-${VERSION}.jar
    - ${MAVEN_REPO_PATH}
    reports:
      dotenv: CI_JOB_ID.TXT
  
#spotbugs-sast:
#  variables:
#    COMPILE: "false"
#    MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository

#sast:
#  stage: test
#include:
#  - template: Security/SAST.gitlab-ci.yml
#sonarq-backend-check:
#  stage: test

#  image: maven:3.8.3-openjdk-16

#  variables:
#    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
#    GIT_DEPTH: "0"
#  script:
#    - cd backend
#    - mvn verify sonar:sonar
#      -Dsonar.qualitygate.wait=true
#      -Dsonar.projectKey=02_alexander_volokhov_backend
#      -Dsonar.projectName=02_alexander_volokhov_backend
#      -Dsonar.host.url=$SONAR_URL
#      -Dsonar.login=$SONAR_TOKEN

#upload-release-to-GIT:
#  stage: release
#  script:
#  - echo "$MY_TOKEN"
#  - echo "Get artifact from job ${ARTIFACT_JOB_ID}"
#
#  - 'curl --location --output sausage-store-${VERSION}.zip -H "PRIVATE-TOKEN:
#    ${MY_TOKEN}" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/jobs/${ARTIFACT_JOB_ID}/artifacts"'
#
#  - "curl -sSL -H \"JOB-TOKEN: ${CI_JOB_TOKEN}\" -T sausage-store-${VERSION}.zip
#    \"${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/sausage-store/${CI_COMMIT_SHA}/\"
#    \n"

    

build-docker:
  stage: docker
  dependencies:
    - build
  image: docker:20.10.12-dind-rootless
  before_script:
    - until docker info; do sleep 1; done
    # переменные CI_REGISTRY_USER, CI_REGISTRY_PASSWORD, CI_REGISTRY генерятся Гитлабом, их задавать не надо!
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cd backend
    - >
      docker build
      --build-arg VERSION=$VERSION
      --tag $CI_REGISTRY_IMAGE/sausage-backend:$CI_COMMIT_SHA
      .
    - docker push $CI_REGISTRY_IMAGE/sausage-backend:$CI_COMMIT_SHA

 ###





#upload-backend-latest:
#  variables:
#    GIT_STRATEGY: none
#  image: docker:20.10.12-dind-rootless
#  stage: release
#  before_script:
#    - until docker info; do sleep 1; done
#    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
#  script:
#   - echo "$CI_REGISTRY_IMAGE"
#    - echo "$CI_REGISTRY"
#    - docker pull $CI_REGISTRY_IMAGE/sausage-backend:$CI_COMMIT_SHA
#    # если образ прошел проверки в CI (сканирование, тесты и т.д), то тегаем latest
#    - docker tag $CI_REGISTRY_IMAGE/sausage-backend:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/sausage-backend:latest
#    - docker push $CI_REGISTRY_IMAGE/sausage-backend:latest

#deploy-backend:
#  stage: deploy
#  when: manual
#  image: alpine:3.15.0
#  # если хотим сделать деплой по кнопке
#   
#  before_script:
#    - apk add openssh-client bash
#    - eval $(ssh-agent -s)
#    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
#    - mkdir -p ~/.ssh
#    - chmod 700 ~/.ssh
#    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
#    - chmod 644 ~/.ssh/known_hosts

#  script:
#    - touch .env 
#    - env | grep ${MONGO_URI_WHOLE} > .env 
#    - env | grep ${PSQL_DB_PASSWORD} >> .env
#    - env | grep ${PSQL_HOST} >> .env
#    - env | grep ${PSQL_USER} >> .env
#    - env | grep ${PSQL_PORT} >> .env
#    - env | grep ${PSQL_DBNAME} >> .env
#    - scp .env ${DEV_USER}@${DEV_HOST}:/home/${DEV_USER}/.env
#
#    - ssh ${DEV_USER}@${DEV_HOST}
#      "export "CI_REGISTRY_IMAGE=${CI_REGISTRY_IMAGE}";
#       export "CI_REGISTRY_PASSWORD=${CI_REGISTRY_PASSWORD}";
#       export "CI_REGISTRY_USER=${CI_REGISTRY_USER}";
#       export "CI_REGISTRY=${CI_REGISTRY}";
#       export "VERSION=${VERSION}";
#       export "SPRING_DATASOURCE_URL=${PSQL_HOST}";
#       export "SPRING_DATASOURCE_URL=${PSQL_PORT}";
#       export "SPRING_DATASOURCE_URL=${PSQL_DBNAME}";
#       export "SPRING_DATASOURCE_USERNAME=${PSQL_USER}";
#       export "SPRING_DATASOURCE_PASSWORD=${PSQL_DB_PASSWORD}";
#       export "SPRING_DATA_MONGODB_URI=${MONGO_URI_WHOLE}";
#      /bin/bash -s " < ./backend/backend_deploy.sh
